#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <string>
#include <vector>

using namespace std;

// Trie Node structure for storing blacklisted URLs
class TrieNode {
public:
    unordered_map<char, TrieNode*> children;
    bool isEndOfURL;
    TrieNode() {
        isEndOfURL = false;
    }
};

class Trie {
private:
    TrieNode* root;

public:
    Trie() {
        root = new TrieNode();
    }

    // Insert URL into Trie
    void insert(string url) {
        TrieNode* currentNode = root;
        for (char ch : url) {
            if (currentNode->children.find(ch) == currentNode->children.end()) {
                currentNode->children[ch] = new TrieNode();
            }
            currentNode = currentNode->children[ch];
        }
        currentNode->isEndOfURL = true;
    }

    // Search URL in Trie
    bool search(string url) {
        TrieNode* currentNode = root;
        for (char ch : url) {
            if (currentNode->children.find(ch) == currentNode->children.end()) {
                return false;
            }
            currentNode = currentNode->children[ch];
        }
        return currentNode->isEndOfURL;
    }
};

// Rabin-Karp algorithm for string matching (detecting phishing keywords)
int rabinKarpSearch(string text, string pattern) {
    int n = text.length();
    int m = pattern.length();
    int d = 256; // Number of characters in the input alphabet
    int q = 101; // A prime number for hashing
    int p = 0; // Hash value for pattern
    int t = 0; // Hash value for text
    int h = 1;

    // Precompute the value of h = d^(m-1) % q
    for (int i = 0; i < m - 1; i++) {
        h = (h * d) % q;
    }

    // Compute the hash value of the pattern and the first window of the text
    for (int i = 0; i < m; i++) {
        p = (d * p + pattern[i]) % q;
        t = (d * t + text[i]) % q;
    }

    // Slide the pattern over the text one by one
    for (int i = 0; i <= n - m; i++) {
        if (p == t) {
            int j;
            // Check if the pattern matches the text
            for (j = 0; j < m; j++) {
                if (text[i + j] != pattern[j]) {
                    break;
                }
            }
            if (j == m) {
                return i; // Pattern found at index i
            }
        }

        // Compute hash value for the next window of the text
        if (i < n - m) {
            t = (d * (t - text[i] * h) + text[i + m]) % q;
            if (t < 0) {
                t = t + q;
            }
        }
    }
    return -1; // Pattern not found
}

// Class to detect malicious scripts using hashing
class MaliciousScriptDetector {
private:
    unordered_set<string> maliciousScripts;

public:
    void addMaliciousScript(string script) {
        maliciousScripts.insert(script);
    }

    bool isMalicious(string script) {
        return maliciousScripts.find(script) != maliciousScripts.end();
    }
};

// Alert system to process real-time alerts using a queue
class AlertSystem {
private:
    queue<string> alertQueue;

public:
    void addAlert(string alert) {
        alertQueue.push(alert);
    }

    void processAlerts() {
        while (!alertQueue.empty()) {
            cout << "ALERT: " << alertQueue.front() << endl;
            alertQueue.pop();
        }
    }
};

// Main function that ties everything together
int main() {
    // Initialize data structures
    Trie urlTrie;
    MaliciousScriptDetector scriptDetector;
    AlertSystem alertSystem;

    // Insert some blacklisted URLs into the Trie
    urlTrie.insert("phishingsite.com");
    urlTrie.insert("fakebank.com");

    // Add some known malicious script patterns
    scriptDetector.addMaliciousScript("<script>alert('Hacked');</script>");
    scriptDetector.addMaliciousScript("<script>evilFunction();</script>");

    // Simulate website visit with URL and page content
    string url = "phishingsite.com";
    string pageContent = "<script>alert('Hacked');</script>";

    // Check for blacklisted URL
    if (urlTrie.search(url)) {
        alertSystem.addAlert("Phishing URL detected: " + url);
    }

    // Check for malicious script
    if (scriptDetector.isMalicious(pageContent)) {
        alertSystem.addAlert("Malicious script detected!");
    }

    // Search for phishing keywords in the page content using Rabin-Karp
    string pattern = "fake";
    if (rabinKarpSearch(pageContent, pattern) != -1) {
        alertSystem.addAlert("Phishing keyword detected: " + pattern);
    }

    // Process and display alerts
    alertSystem.processAlerts();

    return 0;
}
